#!/usr/bin/env bash
set -e
shopt -s nocasematch

#
# Configuration
#
XIP_ROOT_ADDRESSES=( $XIP_ROOT_ADDRESSES )
XIP_NS_ADDRESSES=( $XIP_NS_ADDRESSES )

#
# Protocol helpers
#
read_cmd() {
  local IFS=$'\t'
  local i=0
  local arg

  read -ra CMD
  for arg; do
    eval "$arg=\"\${CMD[$i]}\""
    let i=i+1
  done
}

send_cmd() {
  local IFS=$'\t'
  printf "%s\n" "$*"
}

fail() {
  send_cmd "FAIL"
  log "Exiting"
  exit 1
}

read_helo() {
  read_cmd HELO VERSION
  [ "$HELO" = "HELO" ] && [ "$VERSION" = "1" ]
}

read_query() {
  read_cmd TYPE QNAME QCLASS QTYPE ID IP
}

send_answer() {
  local type="$1"
  shift
  send_cmd "DATA" "$QNAME" "$QCLASS" "$type" "$XIP_TTL" "$ID" "$@"
}

log() {
  printf "[xip-pdns:$$] %s\n" "$@" >&2
}


#
# xip.io domain helpers
#
XIP_DOMAIN_PATTERN="(^|\.)${XIP_DOMAIN//./\.}\$"
NS_SUBDOMAIN_PATTERN="^ns-([0-9]+)\$"
IP_SUBDOMAIN_PATTERN1="(^|-)(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)-){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\$"
IP_SUBDOMAIN_PATTERN2="^(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)-){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))($|-)"

qtype_is() {
  [ "$QTYPE" = "$1" ] || [ "$QTYPE" = "ANY" ]
}

qname_matches_domain() {
  [[ "$QNAME" =~ $XIP_DOMAIN_PATTERN ]]
}

qname_is_root_domain() {
  [ "$QNAME" = "$XIP_DOMAIN" ]
}

extract_subdomain_from_qname() {
  SUBDOMAIN="${QNAME:0:${#QNAME}-${#XIP_DOMAIN}}"
  SUBDOMAIN="${SUBDOMAIN%.}"
}

subdomain_is_ns() {
  [[ "$SUBDOMAIN" =~ $NS_SUBDOMAIN_PATTERN ]]
}

subdomain_is_ip1() {
  [[ "$SUBDOMAIN" =~ $IP_SUBDOMAIN_PATTERN1 ]]
}

subdomain_is_ip2() {
  [[ "$SUBDOMAIN" =~ $IP_SUBDOMAIN_PATTERN2 ]]
}

resolve_ns_subdomain() {
  local index="${SUBDOMAIN:3}"
  echo "${XIP_NS_ADDRESSES[$index]}"
}

resolve_ip1_subdomain() {
  [[ "$SUBDOMAIN" =~ $IP_SUBDOMAIN_PATTERN1 ]] || true
  echo "${BASH_REMATCH[2]//-/.}"
}

resolve_ip2_subdomain() {
  [[ "$SUBDOMAIN" =~ $IP_SUBDOMAIN_PATTERN2 ]] || true
  echo "${BASH_REMATCH[1]//-/.}"
}

answer_soa_query() {
  send_answer "SOA" "admin.$XIP_DOMAIN ns-0.$XIP_DOMAIN $XIP_TIMESTAMP $XIP_TTL $XIP_TTL $XIP_TTL $XIP_TTL"
}

answer_ns_query() {
  local i=0
  local ns_address
  for ns_address in "${XIP_NS_ADDRESSES[@]}"; do
    send_answer "NS" "ns-$i.$XIP_DOMAIN"
    let i+=1
  done
}

answer_root_a_query() {
  local address
  for address in "${XIP_ROOT_ADDRESSES[@]}"; do
    send_answer "A" "$address"
  done
}

answer_subdomain_a_query_for() {
  local type="$1"
  local address="$(resolve_${type}_subdomain)"
  if [ -n "$address" ]; then
    send_answer "A" "$address"
  fi
}

#
# PowerDNS pipe backend implementation
#
trap fail err
read_helo
send_cmd "OK" "xip.io PowerDNS pipe backend (protocol version 1)"

while read_query; do
  log "Query: type=$TYPE qname=$QNAME qclass=$QCLASS qtype=$QTYPE id=$ID ip=$IP"

  if qname_matches_domain; then
    if qname_is_root_domain; then
      if qtype_is "SOA"; then
        answer_soa_query
      fi

      if qtype_is "NS"; then
        answer_ns_query
      fi

      if qtype_is "A"; then
        answer_root_a_query
      fi

    elif qtype_is "A"; then
      extract_subdomain_from_qname

      if subdomain_is_ns; then
        answer_subdomain_a_query_for ns

      elif subdomain_is_ip1; then
	      log "ip1"
        answer_subdomain_a_query_for ip1

      elif subdomain_is_ip2; then
	      log "ip2"
        answer_subdomain_a_query_for ip2

      fi
    fi
  fi

  send_cmd "END"
done
